[{"C:\\Users\\PietroBorc\\Desktop\\Progetto1\\esercizio1\\src\\index.js":"1","C:\\Users\\PietroBorc\\Desktop\\Progetto1\\esercizio1\\src\\App.js":"2","C:\\Users\\PietroBorc\\Desktop\\Progetto1\\esercizio1\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":6569,"mtime":1629816609412,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rw7gbh",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\PietroBorc\\Desktop\\Progetto1\\esercizio1\\src\\index.js",[],"C:\\Users\\PietroBorc\\Desktop\\Progetto1\\esercizio1\\src\\App.js",["15","16","17","18","19"],"import React, {useEffect, useState} from 'react';\nimport iconafrutta from \"./images/iconafrutta.png\";\nimport \"./App.css\";\nconst API_HOST = \"http://localhost:3000\";\nconst INVENTORY_API_URL = `${API_HOST}/frutti`;\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"></link>\n\nfunction App() {\n    const [data, setData] = useState([]);\n\n    const [todos, setTodos] = React.useState([]);  \n    const [isHidden,setHiddden] = React.useState(true);\n    const [buttonAggiungiHidden,setButtonAggiungiHidden] = React.useState(false);\n    const [buttonChiudiHidden,setButtonChiudiHidden] = React.useState(true);\n\n    const [todo, setTodo] = React.useState(\"\");  \n    const [todo1, setTodo1] = React.useState(\"\");\n    const [todo2, setTodo2] = React.useState(\"\");\n    \n\n    const fetchInventory = () => {\n        fetch(`${INVENTORY_API_URL}`)\n            .then(res => res.json())\n            .then(json => setData(json));\n    }\n\n    useEffect(() => {\n        fetchInventory();\n    }, []);\n\n    React.useEffect(() => {\n      const data = localStorage.getItem(\"todos\");\n      const loadedTodos = JSON.parse(data);\n      if (loadedTodos) {\n        setTodos(loadedTodos);\n      }\n    }, []);\n  \n    React.useEffect(() => {\n      const data = JSON.stringify(todos);\n      localStorage.setItem(\"todos\", data);\n    }, [todos]);\n  \n    function handleSubmit(e) {\n      e.preventDefault();\n  \n      const newTodo = {\n        id: new Date().getTime(),\n        imageSrc: iconafrutta,\n        name:todo,\n        qta:todo1,\n        prezzo:todo2,\n        \n      };\n      setData([...data].concat(newTodo));\n      \n      setTodo(\"\");\n      setTodo1(\"\");\n      setTodo2(\"\");\n      \n    }\n  \n    function deleteTodo(id) {\n      let updatedTodos = [...data].filter((todo) => todo.id !== id);\n      setData(updatedTodos);\n    }\n  \n  \n    \n    function isHiddenFunction(){\n      setHiddden(false);\n      setButtonAggiungiHidden(true);\n      setButtonChiudiHidden(false);\n    }\n\n    function isViewableFunction(){\n      setHiddden(true);\n      setButtonAggiungiHidden(false);\n      setButtonChiudiHidden(true);\n    }\n  \n    function finishFunction(quantita){\n  \n      if (quantita>0){\n        return \"Disponibile\"\n      }\n      else{\n  \n        return \"Esaurito\"\n      }\n  \n    }\n    function floatFunction(prezzo){\n\n      if(prezzo==parseInt(prezzo)){\n        return prezzo+\",00\"\n      }\n      else{\n        let stringa = prezzo.toString().replace(\".\",\",\")\n        return stringa\n      }\n\n    }\n    \n\n    return (\n      <div  id=\"image\"> \n      \n            \n      \n\n        <div  id=\"todo-list\">     \n          <h1 ><font color=\"#6A8592\">My Fruit Shop</font></h1>\n          \n          <button  id=\"buttonAggiungi\" hidden={buttonAggiungiHidden}  onClick={isHiddenFunction} ><font color=\"#FFFFFF\">Aggiungi</font>  </button>\n           \n        \n          <div hidden={isHidden}>                 \n              <button id=\"buttonChiudi\" hidden={buttonChiudiHidden} onClick={isViewableFunction}><font color=\"#F3CA1C\">Chiudi</font></button>\n              <form id=\"formShop\"  onSubmit={handleSubmit}>\n                <img id=\"imgFrutta\"  src={iconafrutta} width=\"60\" />\n            \n                <input id=\"input1\"\n                  size=\"10\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                  placeholder=\"   Descrizione prodotto\"\n                  onChange={(e) => setTodo(e.target.value)}\n                  value={todo}\n                  required\n                />\n\n                \n                <input id=\"input2\"\n                size=\"10\"\n                type=\"number\"\n                placeholder=\"Quantità\"\n                min=\"0\"\n                onChange={(e) => setTodo1(e.target.value)}\n                value={todo1}\n                required\n                /> \n\n                <input id=\"input3\"\n                  type=\"number\"\n                  placeholder=\"Prezzo\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  onChange={(e) => setTodo2(e.target.value)}\n                  value={todo2}\n                  required\n                /> \n              \n              \n\n              <button id=\"buttonConferma\" type=\"submit\"><font color=\"#FFFFFF\">Conferma</font></button>\n              \n\n              </form>\n\n           </div>       \n          \n          <div  width=\"1000px\" id=\"container\">\n            \n            <table   width=\"1200px\"  border=\"0\" align=\"center\" cellPadding=\"0\" cellSpacing=\"0\" >\n                <thead >\n                  <tr >\n                      <th width=\"40\" bgcolor=\"#CED9DE\"></th>\n                      <th bgcolor=\"#CED9DE\" width=\"200\" height=\"50\" align=\"left\" width=\"200\" height=\"30\"><font color=\"#8A9DA6\">Descrizione Prodotto</font></th>\n                      <th bgcolor=\"#CED9DE\" width=\"200\" height=\"50\"><font color=\"#8A9DA6\">Qta</font></th>\n                      <th bgcolor=\"#CED9DE\" width=\"200\" height=\"50\"><font color=\"#8A9DA6\">Prezzo</font></th>\n                      <th bgcolor=\"#CED9DE\" width=\"200\" height=\"50\"><font color=\"#8A9DA6\">Stato</font></th>\n                      <th bgcolor=\"#CED9DE\" width=\"200\" height=\"50\" align=\"center\"><font color=\"#8A9DA6\">Azioni</font></th>\n                  </tr>\n                </thead>\n                <tbody>\n\n                \n                      {\n                              data.map((item) => (\n                                  <tr id=\"effettoZoom\" key={item.id}>\n                                      <td  width=\"200\" height=\"100\" align=\"center\"><img width=\"74px\" height=\"74px\" src={item.imageSrc}/></td>\n                                      <td width=\"600\" height=\"100\">{item.name}</td>\n                                      <td width=\"100\" height=\"100\" align=\"center\">{item.qta} pz</td>\n                                      <td width=\"100\" height=\"100\" align=\"center\">{floatFunction(item.prezzo)} €</td>\n                                      <td width=\"100\" height=\"100\" align=\"center\"><button className={finishFunction(item.qta)}><font color=\"#FFFFFF\">{finishFunction(item.qta)}</font></button></td>\n                                      <td width=\"100\" height=\"100\" align=\"center\"><button  id=\"buttonDelete\"  onClick={() => deleteTodo(item.id)}></button></td>                                      \n                                      <td/>\n                                  </tr>\n                              ))\n                          }\n                </tbody>\n            </table>\n          </div>\n\n        </div>\n    </div> \n    );\n}\n\nexport default App;\n","C:\\Users\\PietroBorc\\Desktop\\Progetto1\\esercizio1\\src\\reportWebVitals.js",[],{"ruleId":"20","severity":1,"message":"21","line":96,"column":16,"nodeType":"22","messageId":"23","endLine":96,"endColumn":18},{"ruleId":"24","severity":1,"message":"25","line":122,"column":17,"nodeType":"26","endLine":122,"endColumn":69},{"ruleId":"27","severity":1,"message":"28","line":170,"column":82,"nodeType":"29","messageId":"30","endLine":170,"endColumn":93},{"ruleId":"27","severity":1,"message":"28","line":170,"column":94,"nodeType":"29","messageId":"30","endLine":170,"endColumn":105},{"ruleId":"24","severity":1,"message":"25","line":183,"column":84,"nodeType":"26","endLine":183,"endColumn":137},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps"]